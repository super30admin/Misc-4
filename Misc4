#Online Election
#tc: O(logN)
#sc: O(N)
class TopVotedCandidate:

    def __init__(self, persons: List[int], times: List[int]):
        self.times = times 
        self.winner = []
        
        pp = 0 
        freq = {} # frequency table 
        for p in persons: 
            freq[p] = 1 + freq.get(p, 0)
            if freq[p] >= freq.get(pp, 0): pp = p
            self.winner.append(pp)


    def q(self, t: int) -> int:
        """Standard last-true binary search."""
        lo, hi = -1, len(self.times)-1
        while lo < hi: 
            mid = lo + hi + 1 >> 1
            if self.times[mid] <= t: lo = mid
            else: hi = mid - 1
        return self.winner[lo]
#Largest Rectangle in Histogram
# Time: O(N)
# Space: O(N)
class Solution:
    def largestRectangleArea(self, heights: List[int]) -> int:
        n = len(heights)
        # left boundary => next smaller element to left
        stack = []
        nextSmallerLeft = [0]*n
        for i in range(n):
            while stack and heights[stack[-1]] >= heights[i]:
                stack.pop()
            if stack:
                nextSmallerLeft[i] = stack[-1] + 1
            stack.append(i)
        
        # right boundary => next smaller element to right
        stack = []
        nextSmallerRight = [n-1]*n
        for i in range(n-1, -1, -1):
            while stack and heights[stack[-1]] >= heights[i]:
                stack.pop()
            if stack:
                nextSmallerRight[i] = stack[-1] - 1
            stack.append(i)
        
        res = heights[0]
        for i in range(n):
            height = heights[i]
            weidth = nextSmallerRight[i] - nextSmallerLeft[i] + 1
            area = height * weidth
            res = max(res, area)
            
        return res
		
		
