//TimeComplexity.   log(n)
//SpaceComplexity.  O(1)

class TopVotedCandidate {
    HashMap<Integer,Integer> leader;
    HashMap<Integer,Integer> voteCount;
    int[] time;

    public TopVotedCandidate(int[] persons, int[] times) {
        leader = new HashMap<>();
        voteCount = new HashMap<>();
        int max = 0;
        time = times;

        for(int i = 0; i < persons.length; i++){
            voteCount.put(persons[i], voteCount.getOrDefault(persons[i],0)+1);

            if(voteCount.get(persons[i]) >= voteCount.get(max)){
                 max = persons[i];
            }
                leader.put(times[i],max);      
        }
    }
    
    public int q(int t) {
        
            int low = 0;
            int high = time.length - 1;
        if(leader.containsKey(t)){
            return leader.get(t);
             
        }else{
           

        while(low <= high){

            int mid = low +( high - low) / 2;

            if(time[mid] > t){
                high = mid -1;
            }else{
                low = mid+1;
            }
        }           
        }
        return leader.get(time[high]);
    }
}

/**
 * Your TopVotedCandidate object will be instantiated and called as such:
 * TopVotedCandidate obj = new TopVotedCandidate(persons, times);
 * int param_1 = obj.q(t);
 */
